
services:
  # Backend Service (FastAPI)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: portfolio-backend
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
    volumes:
      # Montar código fuente para desarrollo con hot reload
      - ./backend:/app
      # Montar vectorstores para persistencia
      - ./backend/vectorstores:/app/vectorstores
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - portfolio-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Frontend Service (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: portfolio-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      # Montar código fuente para desarrollo con hot reload
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - portfolio-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Redis Service (para cache y sessions)
  redis:
    image: redis:7-alpine
    container_name: portfolio-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - portfolio-network
    command: redis-server --appendonly yes
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Nginx Reverse Proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: portfolio-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - portfolio-network
    profiles:
      - production

volumes:
  redis_data:
    driver: local

networks:
  portfolio-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
